// Generated by gencpp from file pilot/Box.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_BOX_H
#define PILOT_MESSAGE_BOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pilot
{
template <class ContainerAllocator>
struct Box_
{
  typedef Box_<ContainerAllocator> Type;

  Box_()
    : x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
    }
  Box_(const ContainerAllocator& _alloc)
    : x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
  (void)_alloc;
    }



   typedef double _x_min_type;
  _x_min_type x_min;

   typedef double _x_max_type;
  _x_max_type x_max;

   typedef double _y_min_type;
  _y_min_type y_min;

   typedef double _y_max_type;
  _y_max_type y_max;

   typedef double _z_min_type;
  _z_min_type z_min;

   typedef double _z_max_type;
  _z_max_type z_max;





  typedef boost::shared_ptr< ::pilot::Box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::Box_<ContainerAllocator> const> ConstPtr;

}; // struct Box_

typedef ::pilot::Box_<std::allocator<void> > Box;

typedef boost::shared_ptr< ::pilot::Box > BoxPtr;
typedef boost::shared_ptr< ::pilot::Box const> BoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::Box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::Box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::Box_<ContainerAllocator1> & lhs, const ::pilot::Box_<ContainerAllocator2> & rhs)
{
  return lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_min == rhs.y_min &&
    lhs.y_max == rhs.y_max &&
    lhs.z_min == rhs.z_min &&
    lhs.z_max == rhs.z_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::Box_<ContainerAllocator1> & lhs, const ::pilot::Box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::Box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad99bb284c3254d76796e1b66efe44bd";
  }

  static const char* value(const ::pilot::Box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad99bb284c3254d7ULL;
  static const uint64_t static_value2 = 0x6796e1b66efe44bdULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/Box";
  }

  static const char* value(const ::pilot::Box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_min\n"
"float64 x_max\n"
"float64 y_min\n"
"float64 y_max\n"
"float64 z_min\n"
"float64 z_max\n"
;
  }

  static const char* value(const ::pilot::Box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::Box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_min);
      stream.next(m.x_max);
      stream.next(m.y_min);
      stream.next(m.y_max);
      stream.next(m.z_min);
      stream.next(m.z_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::Box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::Box_<ContainerAllocator>& v)
  {
    s << indent << "x_min: ";
    Printer<double>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<double>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_min);
    s << indent << "y_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_max);
    s << indent << "z_min: ";
    Printer<double>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<double>::stream(s, indent + "  ", v.z_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_BOX_H
