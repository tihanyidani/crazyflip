// Generated by gencpp from file pilot/SimulationParameters.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_SIMULATIONPARAMETERS_H
#define PILOT_MESSAGE_SIMULATIONPARAMETERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pilot/Plan.h>
#include <pilot/Box.h>

namespace pilot
{
template <class ContainerAllocator>
struct SimulationParameters_
{
  typedef SimulationParameters_<ContainerAllocator> Type;

  SimulationParameters_()
    : pilot_name()
    , crazyflie_name()
    , iteration_number(0)
    , init_time()
    , plan()
    , fly_box()
    , fly_time(0.0)  {
    }
  SimulationParameters_(const ContainerAllocator& _alloc)
    : pilot_name(_alloc)
    , crazyflie_name(_alloc)
    , iteration_number(0)
    , init_time()
    , plan(_alloc)
    , fly_box(_alloc)
    , fly_time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _pilot_name_type;
  _pilot_name_type pilot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _crazyflie_name_type;
  _crazyflie_name_type crazyflie_name;

   typedef int32_t _iteration_number_type;
  _iteration_number_type iteration_number;

   typedef ros::Time _init_time_type;
  _init_time_type init_time;

   typedef  ::pilot::Plan_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef  ::pilot::Box_<ContainerAllocator>  _fly_box_type;
  _fly_box_type fly_box;

   typedef double _fly_time_type;
  _fly_time_type fly_time;





  typedef boost::shared_ptr< ::pilot::SimulationParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::SimulationParameters_<ContainerAllocator> const> ConstPtr;

}; // struct SimulationParameters_

typedef ::pilot::SimulationParameters_<std::allocator<void> > SimulationParameters;

typedef boost::shared_ptr< ::pilot::SimulationParameters > SimulationParametersPtr;
typedef boost::shared_ptr< ::pilot::SimulationParameters const> SimulationParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::SimulationParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::SimulationParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::SimulationParameters_<ContainerAllocator1> & lhs, const ::pilot::SimulationParameters_<ContainerAllocator2> & rhs)
{
  return lhs.pilot_name == rhs.pilot_name &&
    lhs.crazyflie_name == rhs.crazyflie_name &&
    lhs.iteration_number == rhs.iteration_number &&
    lhs.init_time == rhs.init_time &&
    lhs.plan == rhs.plan &&
    lhs.fly_box == rhs.fly_box &&
    lhs.fly_time == rhs.fly_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::SimulationParameters_<ContainerAllocator1> & lhs, const ::pilot::SimulationParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulationParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulationParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulationParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulationParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulationParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulationParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::SimulationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2241c2e7cdde3bba988379111766cc27";
  }

  static const char* value(const ::pilot::SimulationParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2241c2e7cdde3bbaULL;
  static const uint64_t static_value2 = 0x988379111766cc27ULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::SimulationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/SimulationParameters";
  }

  static const char* value(const ::pilot::SimulationParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::SimulationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pilot_name\n"
"string crazyflie_name\n"
"int32 iteration_number\n"
"time init_time\n"
"pilot/Plan plan\n"
"pilot/Box fly_box\n"
"float64 fly_time\n"
"================================================================================\n"
"MSG: pilot/Plan\n"
"float64[] interval_list\n"
"pilot/Command[] command_list\n"
"================================================================================\n"
"MSG: pilot/Command\n"
"float64 height\n"
"float64 accel\n"
"================================================================================\n"
"MSG: pilot/Box\n"
"float64 x_min\n"
"float64 x_max\n"
"float64 y_min\n"
"float64 y_max\n"
"float64 z_min\n"
"float64 z_max\n"
;
  }

  static const char* value(const ::pilot::SimulationParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::SimulationParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pilot_name);
      stream.next(m.crazyflie_name);
      stream.next(m.iteration_number);
      stream.next(m.init_time);
      stream.next(m.plan);
      stream.next(m.fly_box);
      stream.next(m.fly_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulationParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::SimulationParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::SimulationParameters_<ContainerAllocator>& v)
  {
    s << indent << "pilot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.pilot_name);
    s << indent << "crazyflie_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.crazyflie_name);
    s << indent << "iteration_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iteration_number);
    s << indent << "init_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.init_time);
    s << indent << "plan: ";
    s << std::endl;
    Printer< ::pilot::Plan_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    s << indent << "fly_box: ";
    s << std::endl;
    Printer< ::pilot::Box_<ContainerAllocator> >::stream(s, indent + "  ", v.fly_box);
    s << indent << "fly_time: ";
    Printer<double>::stream(s, indent + "  ", v.fly_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_SIMULATIONPARAMETERS_H
