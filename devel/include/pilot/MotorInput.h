// Generated by gencpp from file pilot/MotorInput.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_MOTORINPUT_H
#define PILOT_MESSAGE_MOTORINPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pilot
{
template <class ContainerAllocator>
struct MotorInput_
{
  typedef MotorInput_<ContainerAllocator> Type;

  MotorInput_()
    : m1_motor(0.0)
    , m2_motor(0.0)
    , m3_motor(0.0)
    , m4_motor(0.0)  {
    }
  MotorInput_(const ContainerAllocator& _alloc)
    : m1_motor(0.0)
    , m2_motor(0.0)
    , m3_motor(0.0)
    , m4_motor(0.0)  {
  (void)_alloc;
    }



   typedef double _m1_motor_type;
  _m1_motor_type m1_motor;

   typedef double _m2_motor_type;
  _m2_motor_type m2_motor;

   typedef double _m3_motor_type;
  _m3_motor_type m3_motor;

   typedef double _m4_motor_type;
  _m4_motor_type m4_motor;





  typedef boost::shared_ptr< ::pilot::MotorInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::MotorInput_<ContainerAllocator> const> ConstPtr;

}; // struct MotorInput_

typedef ::pilot::MotorInput_<std::allocator<void> > MotorInput;

typedef boost::shared_ptr< ::pilot::MotorInput > MotorInputPtr;
typedef boost::shared_ptr< ::pilot::MotorInput const> MotorInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::MotorInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::MotorInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::MotorInput_<ContainerAllocator1> & lhs, const ::pilot::MotorInput_<ContainerAllocator2> & rhs)
{
  return lhs.m1_motor == rhs.m1_motor &&
    lhs.m2_motor == rhs.m2_motor &&
    lhs.m3_motor == rhs.m3_motor &&
    lhs.m4_motor == rhs.m4_motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::MotorInput_<ContainerAllocator1> & lhs, const ::pilot::MotorInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::MotorInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::MotorInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::MotorInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::MotorInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::MotorInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::MotorInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::MotorInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f292020030bdf5ef91b0fca2e65a2223";
  }

  static const char* value(const ::pilot::MotorInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf292020030bdf5efULL;
  static const uint64_t static_value2 = 0x91b0fca2e65a2223ULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::MotorInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/MotorInput";
  }

  static const char* value(const ::pilot::MotorInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::MotorInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 m1_motor\n"
"float64 m2_motor\n"
"float64 m3_motor\n"
"float64 m4_motor\n"
;
  }

  static const char* value(const ::pilot::MotorInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::MotorInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.m1_motor);
      stream.next(m.m2_motor);
      stream.next(m.m3_motor);
      stream.next(m.m4_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::MotorInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::MotorInput_<ContainerAllocator>& v)
  {
    s << indent << "m1_motor: ";
    Printer<double>::stream(s, indent + "  ", v.m1_motor);
    s << indent << "m2_motor: ";
    Printer<double>::stream(s, indent + "  ", v.m2_motor);
    s << indent << "m3_motor: ";
    Printer<double>::stream(s, indent + "  ", v.m3_motor);
    s << indent << "m4_motor: ";
    Printer<double>::stream(s, indent + "  ", v.m4_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_MOTORINPUT_H
