// Generated by gencpp from file pilot/SimulateFeedback.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_SIMULATEFEEDBACK_H
#define PILOT_MESSAGE_SIMULATEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pilot
{
template <class ContainerAllocator>
struct SimulateFeedback_
{
  typedef SimulateFeedback_<ContainerAllocator> Type;

  SimulateFeedback_()
    : progress_percentage(0)  {
    }
  SimulateFeedback_(const ContainerAllocator& _alloc)
    : progress_percentage(0)  {
  (void)_alloc;
    }



   typedef uint8_t _progress_percentage_type;
  _progress_percentage_type progress_percentage;





  typedef boost::shared_ptr< ::pilot::SimulateFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::SimulateFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SimulateFeedback_

typedef ::pilot::SimulateFeedback_<std::allocator<void> > SimulateFeedback;

typedef boost::shared_ptr< ::pilot::SimulateFeedback > SimulateFeedbackPtr;
typedef boost::shared_ptr< ::pilot::SimulateFeedback const> SimulateFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::SimulateFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::SimulateFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::SimulateFeedback_<ContainerAllocator1> & lhs, const ::pilot::SimulateFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress_percentage == rhs.progress_percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::SimulateFeedback_<ContainerAllocator1> & lhs, const ::pilot::SimulateFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulateFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::SimulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "107e41710fed83193baa98558e7f27ff";
  }

  static const char* value(const ::pilot::SimulateFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x107e41710fed8319ULL;
  static const uint64_t static_value2 = 0x3baa98558e7f27ffULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::SimulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/SimulateFeedback";
  }

  static const char* value(const ::pilot::SimulateFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::SimulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 progress_percentage\n"
;
  }

  static const char* value(const ::pilot::SimulateFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::SimulateFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress_percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulateFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::SimulateFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::SimulateFeedback_<ContainerAllocator>& v)
  {
    s << indent << "progress_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.progress_percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_SIMULATEFEEDBACK_H
