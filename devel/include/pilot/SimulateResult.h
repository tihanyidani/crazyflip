// Generated by gencpp from file pilot/SimulateResult.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_SIMULATERESULT_H
#define PILOT_MESSAGE_SIMULATERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pilot/SimulationResults.h>

namespace pilot
{
template <class ContainerAllocator>
struct SimulateResult_
{
  typedef SimulateResult_<ContainerAllocator> Type;

  SimulateResult_()
    : simulation_results()  {
    }
  SimulateResult_(const ContainerAllocator& _alloc)
    : simulation_results(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pilot::SimulationResults_<ContainerAllocator>  _simulation_results_type;
  _simulation_results_type simulation_results;





  typedef boost::shared_ptr< ::pilot::SimulateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::SimulateResult_<ContainerAllocator> const> ConstPtr;

}; // struct SimulateResult_

typedef ::pilot::SimulateResult_<std::allocator<void> > SimulateResult;

typedef boost::shared_ptr< ::pilot::SimulateResult > SimulateResultPtr;
typedef boost::shared_ptr< ::pilot::SimulateResult const> SimulateResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::SimulateResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::SimulateResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::SimulateResult_<ContainerAllocator1> & lhs, const ::pilot::SimulateResult_<ContainerAllocator2> & rhs)
{
  return lhs.simulation_results == rhs.simulation_results;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::SimulateResult_<ContainerAllocator1> & lhs, const ::pilot::SimulateResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulateResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulateResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::SimulateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc843a7027a129d61200f8f4bdae5d5d";
  }

  static const char* value(const ::pilot::SimulateResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc843a7027a129d6ULL;
  static const uint64_t static_value2 = 0x1200f8f4bdae5d5dULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::SimulateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/SimulateResult";
  }

  static const char* value(const ::pilot::SimulateResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::SimulateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"pilot/SimulationResults simulation_results\n"
"\n"
"================================================================================\n"
"MSG: pilot/SimulationResults\n"
"bool has_survived\n"
"float64 survival_time\n"
"float64 fitness\n"
;
  }

  static const char* value(const ::pilot::SimulateResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::SimulateResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.simulation_results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulateResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::SimulateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::SimulateResult_<ContainerAllocator>& v)
  {
    s << indent << "simulation_results: ";
    s << std::endl;
    Printer< ::pilot::SimulationResults_<ContainerAllocator> >::stream(s, indent + "  ", v.simulation_results);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_SIMULATERESULT_H
