// Generated by gencpp from file pilot/SimulationResults.msg
// DO NOT EDIT!


#ifndef PILOT_MESSAGE_SIMULATIONRESULTS_H
#define PILOT_MESSAGE_SIMULATIONRESULTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pilot
{
template <class ContainerAllocator>
struct SimulationResults_
{
  typedef SimulationResults_<ContainerAllocator> Type;

  SimulationResults_()
    : has_survived(false)
    , survival_time(0.0)
    , fitness(0.0)  {
    }
  SimulationResults_(const ContainerAllocator& _alloc)
    : has_survived(false)
    , survival_time(0.0)
    , fitness(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _has_survived_type;
  _has_survived_type has_survived;

   typedef double _survival_time_type;
  _survival_time_type survival_time;

   typedef double _fitness_type;
  _fitness_type fitness;





  typedef boost::shared_ptr< ::pilot::SimulationResults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pilot::SimulationResults_<ContainerAllocator> const> ConstPtr;

}; // struct SimulationResults_

typedef ::pilot::SimulationResults_<std::allocator<void> > SimulationResults;

typedef boost::shared_ptr< ::pilot::SimulationResults > SimulationResultsPtr;
typedef boost::shared_ptr< ::pilot::SimulationResults const> SimulationResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pilot::SimulationResults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pilot::SimulationResults_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pilot::SimulationResults_<ContainerAllocator1> & lhs, const ::pilot::SimulationResults_<ContainerAllocator2> & rhs)
{
  return lhs.has_survived == rhs.has_survived &&
    lhs.survival_time == rhs.survival_time &&
    lhs.fitness == rhs.fitness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pilot::SimulationResults_<ContainerAllocator1> & lhs, const ::pilot::SimulationResults_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulationResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pilot::SimulationResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulationResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pilot::SimulationResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulationResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pilot::SimulationResults_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pilot::SimulationResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "045f112ef1324231dcc96a1497c5d849";
  }

  static const char* value(const ::pilot::SimulationResults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x045f112ef1324231ULL;
  static const uint64_t static_value2 = 0xdcc96a1497c5d849ULL;
};

template<class ContainerAllocator>
struct DataType< ::pilot::SimulationResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pilot/SimulationResults";
  }

  static const char* value(const ::pilot::SimulationResults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pilot::SimulationResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool has_survived\n"
"float64 survival_time\n"
"float64 fitness\n"
;
  }

  static const char* value(const ::pilot::SimulationResults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pilot::SimulationResults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.has_survived);
      stream.next(m.survival_time);
      stream.next(m.fitness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulationResults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pilot::SimulationResults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pilot::SimulationResults_<ContainerAllocator>& v)
  {
    s << indent << "has_survived: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_survived);
    s << indent << "survival_time: ";
    Printer<double>::stream(s, indent + "  ", v.survival_time);
    s << indent << "fitness: ";
    Printer<double>::stream(s, indent + "  ", v.fitness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PILOT_MESSAGE_SIMULATIONRESULTS_H
