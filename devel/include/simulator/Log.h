// Generated by gencpp from file simulator/Log.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_LOG_H
#define SIMULATOR_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <simulator/Command.h>
#include <simulator/Measurement.h>
#include <simulator/MotorInput.h>

namespace simulator
{
template <class ContainerAllocator>
struct Log_
{
  typedef Log_<ContainerAllocator> Type;

  Log_()
    : time(0.0)
    , command()
    , measurement()
    , motor_input()  {
    }
  Log_(const ContainerAllocator& _alloc)
    : time(0.0)
    , command(_alloc)
    , measurement(_alloc)
    , motor_input(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef  ::simulator::Command_<ContainerAllocator>  _command_type;
  _command_type command;

   typedef  ::simulator::Measurement_<ContainerAllocator>  _measurement_type;
  _measurement_type measurement;

   typedef  ::simulator::MotorInput_<ContainerAllocator>  _motor_input_type;
  _motor_input_type motor_input;





  typedef boost::shared_ptr< ::simulator::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::Log_<ContainerAllocator> const> ConstPtr;

}; // struct Log_

typedef ::simulator::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::simulator::Log > LogPtr;
typedef boost::shared_ptr< ::simulator::Log const> LogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::Log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::Log_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::Log_<ContainerAllocator1> & lhs, const ::simulator::Log_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.command == rhs.command &&
    lhs.measurement == rhs.measurement &&
    lhs.motor_input == rhs.motor_input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::Log_<ContainerAllocator1> & lhs, const ::simulator::Log_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Log_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a78651615685e7f7458e421d4bbb39e4";
  }

  static const char* value(const ::simulator::Log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa78651615685e7f7ULL;
  static const uint64_t static_value2 = 0x458e421d4bbb39e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/Log";
  }

  static const char* value(const ::simulator::Log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"simulator/Command command\n"
"simulator/Measurement measurement\n"
"simulator/MotorInput motor_input\n"
"================================================================================\n"
"MSG: simulator/Command\n"
"float64 accel\n"
"float64 dd_roll\n"
"================================================================================\n"
"MSG: simulator/Measurement\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"================================================================================\n"
"MSG: simulator/MotorInput\n"
"float64 motor_1\n"
"float64 motor_2\n"
"float64 motor_3\n"
"float64 motor_4\n"
;
  }

  static const char* value(const ::simulator::Log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::Log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.command);
      stream.next(m.measurement);
      stream.next(m.motor_input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::Log_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "command: ";
    s << std::endl;
    Printer< ::simulator::Command_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
    s << indent << "measurement: ";
    s << std::endl;
    Printer< ::simulator::Measurement_<ContainerAllocator> >::stream(s, indent + "  ", v.measurement);
    s << indent << "motor_input: ";
    s << std::endl;
    Printer< ::simulator::MotorInput_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_LOG_H
