// Generated by gencpp from file crazyflie/PlanGoal.msg
// DO NOT EDIT!


#ifndef CRAZYFLIE_MESSAGE_PLANGOAL_H
#define CRAZYFLIE_MESSAGE_PLANGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <crazyflie/Command.h>

namespace crazyflie
{
template <class ContainerAllocator>
struct PlanGoal_
{
  typedef PlanGoal_<ContainerAllocator> Type;

  PlanGoal_()
    : interval_list()
    , command_list()  {
    }
  PlanGoal_(const ContainerAllocator& _alloc)
    : interval_list(_alloc)
    , command_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _interval_list_type;
  _interval_list_type interval_list;

   typedef std::vector< ::crazyflie::Command_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::crazyflie::Command_<ContainerAllocator> >> _command_list_type;
  _command_list_type command_list;





  typedef boost::shared_ptr< ::crazyflie::PlanGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyflie::PlanGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PlanGoal_

typedef ::crazyflie::PlanGoal_<std::allocator<void> > PlanGoal;

typedef boost::shared_ptr< ::crazyflie::PlanGoal > PlanGoalPtr;
typedef boost::shared_ptr< ::crazyflie::PlanGoal const> PlanGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyflie::PlanGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyflie::PlanGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyflie::PlanGoal_<ContainerAllocator1> & lhs, const ::crazyflie::PlanGoal_<ContainerAllocator2> & rhs)
{
  return lhs.interval_list == rhs.interval_list &&
    lhs.command_list == rhs.command_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyflie::PlanGoal_<ContainerAllocator1> & lhs, const ::crazyflie::PlanGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyflie

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crazyflie::PlanGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyflie::PlanGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie::PlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie::PlanGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie::PlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie::PlanGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyflie::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10456e964d2e5406cf0e6a1df9aa5bd6";
  }

  static const char* value(const ::crazyflie::PlanGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10456e964d2e5406ULL;
  static const uint64_t static_value2 = 0xcf0e6a1df9aa5bd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyflie::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyflie/PlanGoal";
  }

  static const char* value(const ::crazyflie::PlanGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyflie::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float64[] interval_list\n"
"crazyflie/Command[] command_list\n"
"\n"
"================================================================================\n"
"MSG: crazyflie/Command\n"
"float64 accel\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::crazyflie::PlanGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyflie::PlanGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.interval_list);
      stream.next(m.command_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyflie::PlanGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyflie::PlanGoal_<ContainerAllocator>& v)
  {
    s << indent << "interval_list[]" << std::endl;
    for (size_t i = 0; i < v.interval_list.size(); ++i)
    {
      s << indent << "  interval_list[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.interval_list[i]);
    }
    s << indent << "command_list[]" << std::endl;
    for (size_t i = 0; i < v.command_list.size(); ++i)
    {
      s << indent << "  command_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::crazyflie::Command_<ContainerAllocator> >::stream(s, indent + "    ", v.command_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYFLIE_MESSAGE_PLANGOAL_H
