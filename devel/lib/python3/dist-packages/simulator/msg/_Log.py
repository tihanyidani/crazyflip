# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/Log.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import simulator.msg

class Log(genpy.Message):
  _md5sum = "a78651615685e7f7458e421d4bbb39e4"
  _type = "simulator/Log"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time
simulator/Command command
simulator/Measurement measurement
simulator/MotorInput motor_input
================================================================================
MSG: simulator/Command
float64 accel
float64 dd_roll
================================================================================
MSG: simulator/Measurement
float64 x
float64 y
float64 z
float64 roll
float64 pitch
float64 yaw
================================================================================
MSG: simulator/MotorInput
float64 motor_1
float64 motor_2
float64 motor_3
float64 motor_4"""
  __slots__ = ['time','command','measurement','motor_input']
  _slot_types = ['float64','simulator/Command','simulator/Measurement','simulator/MotorInput']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,command,measurement,motor_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Log, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.command is None:
        self.command = simulator.msg.Command()
      if self.measurement is None:
        self.measurement = simulator.msg.Measurement()
      if self.motor_input is None:
        self.motor_input = simulator.msg.MotorInput()
    else:
      self.time = 0.
      self.command = simulator.msg.Command()
      self.measurement = simulator.msg.Measurement()
      self.motor_input = simulator.msg.MotorInput()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.time, _x.command.accel, _x.command.dd_roll, _x.measurement.x, _x.measurement.y, _x.measurement.z, _x.measurement.roll, _x.measurement.pitch, _x.measurement.yaw, _x.motor_input.motor_1, _x.motor_input.motor_2, _x.motor_input.motor_3, _x.motor_input.motor_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.command is None:
        self.command = simulator.msg.Command()
      if self.measurement is None:
        self.measurement = simulator.msg.Measurement()
      if self.motor_input is None:
        self.motor_input = simulator.msg.MotorInput()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.time, _x.command.accel, _x.command.dd_roll, _x.measurement.x, _x.measurement.y, _x.measurement.z, _x.measurement.roll, _x.measurement.pitch, _x.measurement.yaw, _x.motor_input.motor_1, _x.motor_input.motor_2, _x.motor_input.motor_3, _x.motor_input.motor_4,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.time, _x.command.accel, _x.command.dd_roll, _x.measurement.x, _x.measurement.y, _x.measurement.z, _x.measurement.roll, _x.measurement.pitch, _x.measurement.yaw, _x.motor_input.motor_1, _x.motor_input.motor_2, _x.motor_input.motor_3, _x.motor_input.motor_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.command is None:
        self.command = simulator.msg.Command()
      if self.measurement is None:
        self.measurement = simulator.msg.Measurement()
      if self.motor_input is None:
        self.motor_input = simulator.msg.MotorInput()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.time, _x.command.accel, _x.command.dd_roll, _x.measurement.x, _x.measurement.y, _x.measurement.z, _x.measurement.roll, _x.measurement.pitch, _x.measurement.yaw, _x.motor_input.motor_1, _x.motor_input.motor_2, _x.motor_input.motor_3, _x.motor_input.motor_4,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
