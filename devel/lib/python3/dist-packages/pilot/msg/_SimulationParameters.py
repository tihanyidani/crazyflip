# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pilot/SimulationParameters.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import pilot.msg

class SimulationParameters(genpy.Message):
  _md5sum = "2241c2e7cdde3bba988379111766cc27"
  _type = "pilot/SimulationParameters"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string pilot_name
string crazyflie_name
int32 iteration_number
time init_time
pilot/Plan plan
pilot/Box fly_box
float64 fly_time
================================================================================
MSG: pilot/Plan
float64[] interval_list
pilot/Command[] command_list
================================================================================
MSG: pilot/Command
float64 height
float64 accel
================================================================================
MSG: pilot/Box
float64 x_min
float64 x_max
float64 y_min
float64 y_max
float64 z_min
float64 z_max"""
  __slots__ = ['pilot_name','crazyflie_name','iteration_number','init_time','plan','fly_box','fly_time']
  _slot_types = ['string','string','int32','time','pilot/Plan','pilot/Box','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pilot_name,crazyflie_name,iteration_number,init_time,plan,fly_box,fly_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimulationParameters, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pilot_name is None:
        self.pilot_name = ''
      if self.crazyflie_name is None:
        self.crazyflie_name = ''
      if self.iteration_number is None:
        self.iteration_number = 0
      if self.init_time is None:
        self.init_time = genpy.Time()
      if self.plan is None:
        self.plan = pilot.msg.Plan()
      if self.fly_box is None:
        self.fly_box = pilot.msg.Box()
      if self.fly_time is None:
        self.fly_time = 0.
    else:
      self.pilot_name = ''
      self.crazyflie_name = ''
      self.iteration_number = 0
      self.init_time = genpy.Time()
      self.plan = pilot.msg.Plan()
      self.fly_box = pilot.msg.Box()
      self.fly_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.pilot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.crazyflie_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2I().pack(_x.iteration_number, _x.init_time.secs, _x.init_time.nsecs))
      length = len(self.plan.interval_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.plan.interval_list))
      length = len(self.plan.command_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.command_list:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.height, _x.accel))
      _x = self
      buff.write(_get_struct_7d().pack(_x.fly_box.x_min, _x.fly_box.x_max, _x.fly_box.y_min, _x.fly_box.y_max, _x.fly_box.z_min, _x.fly_box.z_max, _x.fly_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.init_time is None:
        self.init_time = genpy.Time()
      if self.plan is None:
        self.plan = pilot.msg.Plan()
      if self.fly_box is None:
        self.fly_box = pilot.msg.Box()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pilot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pilot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.crazyflie_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.crazyflie_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.iteration_number, _x.init_time.secs, _x.init_time.nsecs,) = _get_struct_i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plan.interval_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.command_list = []
      for i in range(0, length):
        val1 = pilot.msg.Command()
        _x = val1
        start = end
        end += 16
        (_x.height, _x.accel,) = _get_struct_2d().unpack(str[start:end])
        self.plan.command_list.append(val1)
      _x = self
      start = end
      end += 56
      (_x.fly_box.x_min, _x.fly_box.x_max, _x.fly_box.y_min, _x.fly_box.y_max, _x.fly_box.z_min, _x.fly_box.z_max, _x.fly_time,) = _get_struct_7d().unpack(str[start:end])
      self.init_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.pilot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.crazyflie_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2I().pack(_x.iteration_number, _x.init_time.secs, _x.init_time.nsecs))
      length = len(self.plan.interval_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plan.interval_list.tostring())
      length = len(self.plan.command_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.command_list:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.height, _x.accel))
      _x = self
      buff.write(_get_struct_7d().pack(_x.fly_box.x_min, _x.fly_box.x_max, _x.fly_box.y_min, _x.fly_box.y_max, _x.fly_box.z_min, _x.fly_box.z_max, _x.fly_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.init_time is None:
        self.init_time = genpy.Time()
      if self.plan is None:
        self.plan = pilot.msg.Plan()
      if self.fly_box is None:
        self.fly_box = pilot.msg.Box()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pilot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pilot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.crazyflie_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.crazyflie_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.iteration_number, _x.init_time.secs, _x.init_time.nsecs,) = _get_struct_i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plan.interval_list = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.command_list = []
      for i in range(0, length):
        val1 = pilot.msg.Command()
        _x = val1
        start = end
        end += 16
        (_x.height, _x.accel,) = _get_struct_2d().unpack(str[start:end])
        self.plan.command_list.append(val1)
      _x = self
      start = end
      end += 56
      (_x.fly_box.x_min, _x.fly_box.x_max, _x.fly_box.y_min, _x.fly_box.y_max, _x.fly_box.z_min, _x.fly_box.z_max, _x.fly_time,) = _get_struct_7d().unpack(str[start:end])
      self.init_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_i2I = None
def _get_struct_i2I():
    global _struct_i2I
    if _struct_i2I is None:
        _struct_i2I = struct.Struct("<i2I")
    return _struct_i2I
